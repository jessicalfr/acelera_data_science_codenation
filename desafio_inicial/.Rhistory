"SG_UF_ESC",
"TP_DEPENDENCIA_ADM_ESC",
"TP_LOCALIZACAO_ESC",
"TP_SIT_FUNC_ESC",
"IN_BAIXA_VISAO",
"IN_CEGUEIRA",
"IN_SURDEZ",
"IN_DEFICIENCIA_AUDITIVA",
"IN_SURDO_CEGUEIRA",
"IN_DEFICIENCIA_FISICA",
"IN_DEFICIENCIA_MENTAL",
"IN_DEFICIT_ATENCAO",
"IN_DISLEXIA",
"IN_DiSCALCULIA",
"IN_AUTISMO",
"IN_VISAO_MONOCULAR",
"IN_OUTRA_DEF",
"IN_SABATISTA",
"IN_GESTANTE",
"IN_LACTANTE",
"IN_IDOSO",
"IN_ESTUDA_CLASSE_HOSPITALAR",
"IN_SEM_RECURSO",
"IN_BRAILLE",
"IN_LEDOR",
"IN_TRANSCRICAO",
"IN_LIBRAS",
"IN_LEITURA_LABIAL",
"IN_GUIA_INTERPRETE",
"IN_CERTIFICADO",
"SG_UF_ENTIDADE_CERTIFICACAO",
"SG_UF_PROVA",
"TP_PRESENCA_MT",
"Q01",
"Q02",
"Q03",
"Q04",
"Q05",
"Q06",
"Q07",
"Q08",
"Q09",
"Q10",
"Q11",
"Q12",
"Q13",
"Q14",
"Q15",
"Q16",
"Q17",
"Q18",
"Q19",
"Q20",
"Q21",
"Q22",
"Q23",
"Q24",
"Q25",
"Q26",
"Q27",
"Q28",
"Q29",
"Q30",
"Q31",
"Q32",
"Q33",
"Q34",
"Q35",
"Q36",
"Q37",
"Q38",
"Q39",
"Q40",
"Q41",
"Q42",
"Q43",
"Q44",
"Q45")
## inicializa o h2o
h2o.init()
# carrega as bases no h2o
treino_h2o = as.h2o(treino_aj)
teste_h2o = as.h2o(teste)
## autoML: qual o algoritmo mais aderente?
automl = h2o.automl(y = var_ind,
x = vars_dep,
training_frame = treino_h2o,
nfolds = 5,
stopping_metric = "RMSE",
sort_metric = "RMSE",
max_models = 10,
seed = 65)
as_tibble(automl@leaderboard)
# dependentes (preditoras)
vars_dep = c("SG_UF_RESIDENCIA",
"NU_IDADE",
"TP_SEXO",
"TP_ESTADO_CIVIL",
"TP_COR_RACA",
"TP_NACIONALIDADE",
"SG_UF_NASCIMENTO",
"TP_ST_CONCLUSAO",
"TP_ANO_CONCLUIU",
"TP_ESCOLA",
"TP_ENSINO",
"IN_TREINEIRO",
"SG_UF_ESC",
"TP_DEPENDENCIA_ADM_ESC",
"TP_LOCALIZACAO_ESC",
"TP_SIT_FUNC_ESC",
"IN_BAIXA_VISAO",
"IN_CEGUEIRA",
"IN_SURDEZ",
"IN_DEFICIENCIA_AUDITIVA",
"IN_SURDO_CEGUEIRA",
"IN_DEFICIENCIA_FISICA",
"IN_DEFICIENCIA_MENTAL",
"IN_DEFICIT_ATENCAO",
"IN_DISLEXIA",
"IN_DISCALCULIA",
"IN_AUTISMO",
"IN_VISAO_MONOCULAR",
"IN_OUTRA_DEF",
"IN_SABATISTA",
"IN_GESTANTE",
"IN_LACTANTE",
"IN_IDOSO",
"IN_ESTUDA_CLASSE_HOSPITALAR",
"IN_SEM_RECURSO",
"IN_BRAILLE",
"IN_LEDOR",
"IN_TRANSCRICAO",
"IN_LIBRAS",
"IN_LEITURA_LABIAL",
"IN_GUIA_INTERPRETE",
"IN_CERTIFICADO",
"SG_UF_ENTIDADE_CERTIFICACAO",
"SG_UF_PROVA",
"TP_PRESENCA_MT",
"Q01",
"Q02",
"Q03",
"Q04",
"Q05",
"Q06",
"Q07",
"Q08",
"Q09",
"Q10",
"Q11",
"Q12",
"Q13",
"Q14",
"Q15",
"Q16",
"Q17",
"Q18",
"Q19",
"Q20",
"Q21",
"Q22",
"Q23",
"Q24",
"Q25",
"Q26",
"Q27",
"Q28",
"Q29",
"Q30",
"Q31",
"Q32",
"Q33",
"Q34",
"Q35",
"Q36",
"Q37",
"Q38",
"Q39",
"Q40",
"Q41",
"Q42",
"Q43",
"Q44",
"Q45")
## autoML: qual o algoritmo mais aderente?
automl = h2o.automl(y = var_ind,
x = vars_dep,
training_frame = treino_h2o,
nfolds = 5,
stopping_metric = "RMSE",
sort_metric = "RMSE",
max_models = 10,
seed = 65)
as_tibble(automl@leaderboard)
# perfomance do líder
h2o.performance(automl@leader)
predict(automl@leader, treino_h2o[1:5,])
View(treino_aj[1:5, "NU_NOTA_MT"], predict(automl@leader, treino_h2o[1:5,]))
treino_aj[1:5, "NU_NOTA_MT"], predict(automl@leader, treino_h2o[1:5,])
c(treino_aj[1:5, "NU_NOTA_MT"], predict(automl@leader, treino_h2o[1:5,]))
# perfomance do líder
h2o.performance(automl@leader)
# predições no banco de teste
pred_teste = predict(automl@leader, teste_h2o)
warnings()
h2o.shutdown()
######### AceleraDev - Data Science ##########
####### Predição de notas ENEM 2016 ##########
## pacotes
library(tidyverse)
library(h2o)
## leitura dos dados
treino = read_csv("train.csv")
teste = read_csv("test.csv")
## variáveis do modelo
# independente (resposta)
var_ind = "NU_NOTA_MT"
# variáveis de acertos na prova de matemática
# treino
treino_aj = treino %>%
# filtra os casos de NA
filter(!is.na(NU_NOTA_MT)) %>%
# define se acertou ou não cada questão
mutate(Q01 = substr(TX_RESPOSTAS_MT,1,1) == substr(TX_GABARITO_MT,1,1),
Q02 = substr(TX_RESPOSTAS_MT,2,2) == substr(TX_GABARITO_MT,2,2),
Q03 = substr(TX_RESPOSTAS_MT,3,3) == substr(TX_GABARITO_MT,3,3),
Q04 = substr(TX_RESPOSTAS_MT,4,4) == substr(TX_GABARITO_MT,4,4),
Q05 = substr(TX_RESPOSTAS_MT,5,5) == substr(TX_GABARITO_MT,5,5),
Q06 = substr(TX_RESPOSTAS_MT,6,6) == substr(TX_GABARITO_MT,6,6),
Q07 = substr(TX_RESPOSTAS_MT,7,7) == substr(TX_GABARITO_MT,7,7),
Q08 = substr(TX_RESPOSTAS_MT,8,8) == substr(TX_GABARITO_MT,8,8),
Q09 = substr(TX_RESPOSTAS_MT,9,9) == substr(TX_GABARITO_MT,9,9),
Q10 = substr(TX_RESPOSTAS_MT,10,10) == substr(TX_GABARITO_MT,10,10),
Q11 = substr(TX_RESPOSTAS_MT,11,11) == substr(TX_GABARITO_MT,11,11),
Q12 = substr(TX_RESPOSTAS_MT,12,12) == substr(TX_GABARITO_MT,12,12),
Q13 = substr(TX_RESPOSTAS_MT,13,13) == substr(TX_GABARITO_MT,13,13),
Q14 = substr(TX_RESPOSTAS_MT,14,14) == substr(TX_GABARITO_MT,14,14),
Q15 = substr(TX_RESPOSTAS_MT,15,15) == substr(TX_GABARITO_MT,15,15),
Q16 = substr(TX_RESPOSTAS_MT,16,16) == substr(TX_GABARITO_MT,16,16),
Q17 = substr(TX_RESPOSTAS_MT,17,17) == substr(TX_GABARITO_MT,17,17),
Q18 = substr(TX_RESPOSTAS_MT,18,18) == substr(TX_GABARITO_MT,18,18),
Q19 = substr(TX_RESPOSTAS_MT,19,19) == substr(TX_GABARITO_MT,19,19),
Q20 = substr(TX_RESPOSTAS_MT,20,20) == substr(TX_GABARITO_MT,20,20),
Q21 = substr(TX_RESPOSTAS_MT,21,21) == substr(TX_GABARITO_MT,21,21),
Q22 = substr(TX_RESPOSTAS_MT,22,22) == substr(TX_GABARITO_MT,22,22),
Q23 = substr(TX_RESPOSTAS_MT,23,23) == substr(TX_GABARITO_MT,23,23),
Q24 = substr(TX_RESPOSTAS_MT,24,24) == substr(TX_GABARITO_MT,24,24),
Q25 = substr(TX_RESPOSTAS_MT,25,25) == substr(TX_GABARITO_MT,25,25),
Q26 = substr(TX_RESPOSTAS_MT,26,26) == substr(TX_GABARITO_MT,26,26),
Q27 = substr(TX_RESPOSTAS_MT,27,27) == substr(TX_GABARITO_MT,27,27),
Q28 = substr(TX_RESPOSTAS_MT,28,28) == substr(TX_GABARITO_MT,28,28),
Q29 = substr(TX_RESPOSTAS_MT,29,29) == substr(TX_GABARITO_MT,29,29),
Q30 = substr(TX_RESPOSTAS_MT,30,30) == substr(TX_GABARITO_MT,30,30),
Q31 = substr(TX_RESPOSTAS_MT,31,31) == substr(TX_GABARITO_MT,31,31),
Q32 = substr(TX_RESPOSTAS_MT,32,32) == substr(TX_GABARITO_MT,32,32),
Q33 = substr(TX_RESPOSTAS_MT,33,33) == substr(TX_GABARITO_MT,33,33),
Q34 = substr(TX_RESPOSTAS_MT,34,34) == substr(TX_GABARITO_MT,34,34),
Q35 = substr(TX_RESPOSTAS_MT,35,35) == substr(TX_GABARITO_MT,35,35),
Q36 = substr(TX_RESPOSTAS_MT,36,36) == substr(TX_GABARITO_MT,36,36),
Q37 = substr(TX_RESPOSTAS_MT,37,37) == substr(TX_GABARITO_MT,37,37),
Q38 = substr(TX_RESPOSTAS_MT,38,38) == substr(TX_GABARITO_MT,38,38),
Q39 = substr(TX_RESPOSTAS_MT,39,39) == substr(TX_GABARITO_MT,39,39),
Q40 = substr(TX_RESPOSTAS_MT,40,40) == substr(TX_GABARITO_MT,40,40),
Q41 = substr(TX_RESPOSTAS_MT,41,41) == substr(TX_GABARITO_MT,41,41),
Q42 = substr(TX_RESPOSTAS_MT,42,42) == substr(TX_GABARITO_MT,42,42),
Q43 = substr(TX_RESPOSTAS_MT,43,43) == substr(TX_GABARITO_MT,43,43),
Q44 = substr(TX_RESPOSTAS_MT,44,44) == substr(TX_GABARITO_MT,44,44),
Q45 = substr(TX_RESPOSTAS_MT,45,45) == substr(TX_GABARITO_MT,45,45))
# teste
teste_aj = teste %>%
# define se acertou ou não cada questão
mutate(Q01 = substr(TX_RESPOSTAS_MT,1,1) == substr(TX_GABARITO_MT,1,1),
Q02 = substr(TX_RESPOSTAS_MT,2,2) == substr(TX_GABARITO_MT,2,2),
Q03 = substr(TX_RESPOSTAS_MT,3,3) == substr(TX_GABARITO_MT,3,3),
Q04 = substr(TX_RESPOSTAS_MT,4,4) == substr(TX_GABARITO_MT,4,4),
Q05 = substr(TX_RESPOSTAS_MT,5,5) == substr(TX_GABARITO_MT,5,5),
Q06 = substr(TX_RESPOSTAS_MT,6,6) == substr(TX_GABARITO_MT,6,6),
Q07 = substr(TX_RESPOSTAS_MT,7,7) == substr(TX_GABARITO_MT,7,7),
Q08 = substr(TX_RESPOSTAS_MT,8,8) == substr(TX_GABARITO_MT,8,8),
Q09 = substr(TX_RESPOSTAS_MT,9,9) == substr(TX_GABARITO_MT,9,9),
Q10 = substr(TX_RESPOSTAS_MT,10,10) == substr(TX_GABARITO_MT,10,10),
Q11 = substr(TX_RESPOSTAS_MT,11,11) == substr(TX_GABARITO_MT,11,11),
Q12 = substr(TX_RESPOSTAS_MT,12,12) == substr(TX_GABARITO_MT,12,12),
Q13 = substr(TX_RESPOSTAS_MT,13,13) == substr(TX_GABARITO_MT,13,13),
Q14 = substr(TX_RESPOSTAS_MT,14,14) == substr(TX_GABARITO_MT,14,14),
Q15 = substr(TX_RESPOSTAS_MT,15,15) == substr(TX_GABARITO_MT,15,15),
Q16 = substr(TX_RESPOSTAS_MT,16,16) == substr(TX_GABARITO_MT,16,16),
Q17 = substr(TX_RESPOSTAS_MT,17,17) == substr(TX_GABARITO_MT,17,17),
Q18 = substr(TX_RESPOSTAS_MT,18,18) == substr(TX_GABARITO_MT,18,18),
Q19 = substr(TX_RESPOSTAS_MT,19,19) == substr(TX_GABARITO_MT,19,19),
Q20 = substr(TX_RESPOSTAS_MT,20,20) == substr(TX_GABARITO_MT,20,20),
Q21 = substr(TX_RESPOSTAS_MT,21,21) == substr(TX_GABARITO_MT,21,21),
Q22 = substr(TX_RESPOSTAS_MT,22,22) == substr(TX_GABARITO_MT,22,22),
Q23 = substr(TX_RESPOSTAS_MT,23,23) == substr(TX_GABARITO_MT,23,23),
Q24 = substr(TX_RESPOSTAS_MT,24,24) == substr(TX_GABARITO_MT,24,24),
Q25 = substr(TX_RESPOSTAS_MT,25,25) == substr(TX_GABARITO_MT,25,25),
Q26 = substr(TX_RESPOSTAS_MT,26,26) == substr(TX_GABARITO_MT,26,26),
Q27 = substr(TX_RESPOSTAS_MT,27,27) == substr(TX_GABARITO_MT,27,27),
Q28 = substr(TX_RESPOSTAS_MT,28,28) == substr(TX_GABARITO_MT,28,28),
Q29 = substr(TX_RESPOSTAS_MT,29,29) == substr(TX_GABARITO_MT,29,29),
Q30 = substr(TX_RESPOSTAS_MT,30,30) == substr(TX_GABARITO_MT,30,30),
Q31 = substr(TX_RESPOSTAS_MT,31,31) == substr(TX_GABARITO_MT,31,31),
Q32 = substr(TX_RESPOSTAS_MT,32,32) == substr(TX_GABARITO_MT,32,32),
Q33 = substr(TX_RESPOSTAS_MT,33,33) == substr(TX_GABARITO_MT,33,33),
Q34 = substr(TX_RESPOSTAS_MT,34,34) == substr(TX_GABARITO_MT,34,34),
Q35 = substr(TX_RESPOSTAS_MT,35,35) == substr(TX_GABARITO_MT,35,35),
Q36 = substr(TX_RESPOSTAS_MT,36,36) == substr(TX_GABARITO_MT,36,36),
Q37 = substr(TX_RESPOSTAS_MT,37,37) == substr(TX_GABARITO_MT,37,37),
Q38 = substr(TX_RESPOSTAS_MT,38,38) == substr(TX_GABARITO_MT,38,38),
Q39 = substr(TX_RESPOSTAS_MT,39,39) == substr(TX_GABARITO_MT,39,39),
Q40 = substr(TX_RESPOSTAS_MT,40,40) == substr(TX_GABARITO_MT,40,40),
Q41 = substr(TX_RESPOSTAS_MT,41,41) == substr(TX_GABARITO_MT,41,41),
Q42 = substr(TX_RESPOSTAS_MT,42,42) == substr(TX_GABARITO_MT,42,42),
Q43 = substr(TX_RESPOSTAS_MT,43,43) == substr(TX_GABARITO_MT,43,43),
Q44 = substr(TX_RESPOSTAS_MT,44,44) == substr(TX_GABARITO_MT,44,44),
Q45 = substr(TX_RESPOSTAS_MT,45,45) == substr(TX_GABARITO_MT,45,45))
View(teste)
names(teste)
names(teste)
######### AceleraDev - Data Science ##########
####### Predição de notas ENEM 2016 ##########
## pacotes
library(tidyverse)
library(h2o)
## leitura dos dados
treino = read_csv("train.csv")
teste = read_csv("test.csv")
names(teste)
# dependente
dep_var = "NU_NOTA_MT"
# independentes
ind_vars = c("SG_UF_RESIDENCIA",
"NU_IDADE",
"TP_SEXO",
"TP_COR_RACA",
"TP_NACIONALIDADE",
"TP_ST_CONCLUSAO",
"TP_ANO_CONCLUIU",
"TP_ESCOLA",
"TP_ENSINO",
"IN_TREINEIRO",
"TP_DEPENDENCIA_ADM_ESCOLA",
"IN_BAIXA_VISAO",
"IN_CEGUEIRA",
"IN_SURDEZ",
"IN_DISLEXIA",
"IN_DESCALCULIA",
"IN_SABATISTA",
"IN_GESTANTE",
"IN_IDOSO",
"TP_PRESENCA_CN",
"TP_PRESENCA_CH",
"TP_PRESENCA_LC",
"NU_NOTA_CN",
"NU_NOTA_CH",
"NU_NOTA_LC",
"TP_LINGUA",
"TP_STATUS_REDACAO",
"NU_NOTA_REDACAO",
"Q001",
"Q002",
"Q006",
"Q024",
"Q025",
"Q025",
"Q027",
"Q047")
## inicializa o h2o
h2o.init()
## autoML
automl = h2o.automl(y = dep_var,
x = ind_vars,
training_frame = as.h2o(treino),
nfolds = 5,
stopping_metric = "RMSE",
sort_metric = "RMSE",
max_models = 15,
seed = 65)
names(teste)
# independentes
ind_vars = c("SG_UF_RESIDENCIA",
"NU_IDADE",
"TP_SEXO",
"TP_COR_RACA",
"TP_NACIONALIDADE",
"TP_ST_CONCLUSAO",
"TP_ANO_CONCLUIU",
"TP_ESCOLA",
"TP_ENSINO",
"IN_TREINEIRO",
"TP_DEPENDENCIA_ADM_ESC",
"IN_BAIXA_VISAO",
"IN_CEGUEIRA",
"IN_SURDEZ",
"IN_DISLEXIA",
"IN_DISCALCULIA",
"IN_SABATISTA",
"IN_GESTANTE",
"IN_IDOSO",
"TP_PRESENCA_CN",
"TP_PRESENCA_CH",
"TP_PRESENCA_LC",
"NU_NOTA_CN",
"NU_NOTA_CH",
"NU_NOTA_LC",
"TP_LINGUA",
"TP_STATUS_REDACAO",
"NU_NOTA_REDACAO",
"Q001",
"Q002",
"Q006",
"Q024",
"Q025",
"Q025",
"Q027",
"Q047")
## autoML
automl = h2o.automl(y = dep_var,
x = ind_vars,
training_frame = as.h2o(treino),
nfolds = 5,
stopping_metric = "RMSE",
sort_metric = "RMSE",
max_models = 15,
seed = 65)
as_tibble(automl@leaderboard)
h2o.performance(automl@leader)
# predições no banco de teste
pred_teste = predict(automl@leader, as.h2o(teste %>% select(ind_vars)))
# predições no banco de teste
pred_teste = predict(automl@leader, as.h2o(teste %>% select(all_of(ind_vars))))
View(pred_teste)
# predições no banco de teste
pred_teste = predict(automl@leader, as.h2o(teste %>% select(all_of(ind_vars)))) %>% as_tibble()
View(pred_teste)
?bind_cold
?bind_cols
# adiciona na base
teste_pred = bind_cols(teste, pred_teste)
names(teste)
View(teste_pred %>% select(TP_PRESENCA_CH, TP_PRESENCA_CN, TP_PRESENCA_LC, predict))
# para os que não fizeram nenhuma prova, definir 0
teste_pred = teste_pred %>%
mutate(NU_NOTA_MT = case_when(
((TP_PRESENCA_CH + TP_PRESENCA_CN + TP_PRESENCA_LC) == 0) ~ NA
((TP_PRESENCA_CH + TP_PRESENCA_CN + TP_PRESENCA_LC) != 0) ~ predict
))
# para os que não fizeram nenhuma prova, definir 0
teste_pred = teste_pred %>%
mutate(NU_NOTA_MT = case_when(
((TP_PRESENCA_CH + TP_PRESENCA_CN + TP_PRESENCA_LC) == 0) ~ NA,
((TP_PRESENCA_CH + TP_PRESENCA_CN + TP_PRESENCA_LC) != 0) ~ predict
))
# para os que não fizeram nenhuma prova, definir 0
teste_pred = teste_pred %>%
mutate(NU_NOTA_MT = case_when(
((TP_PRESENCA_CH + TP_PRESENCA_CN + TP_PRESENCA_LC) == 0) ~ NA,
((TP_PRESENCA_CH + TP_PRESENCA_CN + TP_PRESENCA_LC) != 0) ~ predict
))
# para os que não fizeram nenhuma prova, definir 0
teste_pred = teste_pred %>%
mutate(NU_NOTA_MT = case_when(
((as.numeric(TP_PRESENCA_CH) + as.numeric(TP_PRESENCA_CN) + as.numeric(TP_PRESENCA_LC)) == 0) ~ NA,
((as.numeric(TP_PRESENCA_CH) + as.numeric(TP_PRESENCA_CN) + as.numeric(TP_PRESENCA_LC)) != 0) ~ predict
))
# para os que não fizeram nenhuma prova, definir 0
teste_pred = teste_pred %>%
mutate(NU_NOTA_MT = case_when(
((as.numeric(TP_PRESENCA_CH) + as.numeric(TP_PRESENCA_CN) + as.numeric(TP_PRESENCA_LC)) != 0) ~ predict,
((as.numeric(TP_PRESENCA_CH) + as.numeric(TP_PRESENCA_CN) + as.numeric(TP_PRESENCA_LC)) == 0) ~ NA
))
class(teste_pred$predict)
class(teste_pred$TP_PRESENCA_CH)
class(teste_pred$TP_PRESENCA_CN)
class(teste_pred$TP_PRESENCA_LC)
# para os que não fizeram nenhuma prova, definir 0
teste_pred = teste_pred %>%
mutate(NU_NOTA_MT = case_when(
((as.numeric(TP_PRESENCA_CH) + as.numeric(TP_PRESENCA_CN) + as.numeric(TP_PRESENCA_LC)) > 0) ~ predict,
((as.numeric(TP_PRESENCA_CH) + as.numeric(TP_PRESENCA_CN) + as.numeric(TP_PRESENCA_LC)) == 0) ~ NA
))
# para os que não fizeram nenhuma prova, definir 0
teste_pred = teste_pred %>%
mutate(NU_NOTA_MT = case_when(
((TP_PRESENCA_CH == 0) & (TP_PRESENCA_CN == 0) & (TP_PRESENCA_LC == 0)) ~ NA,
((TP_PRESENCA_CH != 0) | (TP_PRESENCA_CN != 0) | (TP_PRESENCA_LC != 0)) ~ predict
))
rlang::last_error()
# para os que não fizeram nenhuma prova, definir 0
teste_pred = teste_pred %>%
mutate(NU_NOTA_MT = case_when(
((TP_PRESENCA_CH == 0) & (TP_PRESENCA_CN == 0) & (TP_PRESENCA_LC == 0)) ~ 0,
((TP_PRESENCA_CH != 0) | (TP_PRESENCA_CN != 0) | (TP_PRESENCA_LC != 0)) ~ predict
))
# separa os dados finais
dados_finais = teste_pred %>%
mutate(NU_NOTA_MT = case_when(
(NU_NOTA_MT == 0) ~ NA,
(NU_NOTA_MT != 0) ~ NU_NOTA_MT
)) %>%
select(NU_INSCRICAO, NU_NOTA_MT)
# separa os dados finais
dados_finais = teste_pred %>%
select(NU_INSCRICAO, NU_NOTA_MT)
View(dados_finais)
# salva o arquivo
write_csv(dados_finais, "answer.csv")
## pacotes
library(tidyverse)
# encerra o cluster
h2o.shutdown(prompt = FALSE)
as_tibble(automl@leaderboard)
